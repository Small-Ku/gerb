name: Build release binary

env:
  RUST_BACKTRACE: 1
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse

on:
  workflow_dispatch:
  push:
    tags:
      - v*

jobs:
  gvsbuild:
    name: build GTK binaries with gvsbuild
    runs-on: windows-2022
    env:
      gvsbuildref: 078140d0b7dcfd6147b3063114fb38365b7ad5a1
      gvsbuildupdate: 1
    outputs:
      cachekey: ${{ steps.output.outputs.cachekey }}
    steps:
      # this is needed for the cache restore to work
        - name: (GTK binaries) create dir
          run: mkdir C:\gtk-build\gtk\x64\release
        - name: (GTK binaries) get from cache
          uses: actions/cache@v2
          id: cache
          with:
            path: C:\gtk-build\gtk\x64\release\**
            key: gvsbuild-${{ env.gvsbuildupdate }}-${{ env.gvsbuildref }}
        - name: (GTK binaries) checkout gvsbuild
          if: steps.cache.outputs.cache-hit != 'true'
          uses: actions/checkout@v2
          with:
            repository: wingtk/gvsbuild
            ref: ${{ env.gvsbuildref }}
            path: gvsbuild
        # Temporarily move the preinstalled git, it causes errors related to cygwin.
        - name: (GTK binaries) move git binary
          if: steps.cache.outputs.cache-hit != 'true'
          run: |
            move "C:\Program Files\Git\usr\bin" "C:\Program Files\Git\usr\notbin"
            move "C:\Program Files\Git\bin" "C:\Program Files\Git\notbin"
          shell: cmd
        - name: (GTK binaries) install gvsbuild
          if: steps.cache.outputs.cache-hit != 'true'
          working-directory: gvsbuild
          run: python -m pip install .
        - name: (GTK binaries) run gvsbuild
          if: steps.cache.outputs.cache-hit != 'true'
          run: gvsbuild build --platform=x64 --vs-ver=17 --msys-dir=C:\msys64 gtk3 graphene
        - name: (GTK binaries) restore git binary
          if: steps.cache.outputs.cache-hit != 'true'
          run: |
            move "C:\Program Files\Git\usr\notbin" "C:\Program Files\Git\usr\bin"
            move "C:\Program Files\Git\notbin" "C:\Program Files\Git\bin"
          shell: cmd
        - name: (GTK binaries) output cache key
          id: output
          run: echo "cachekey=gvsbuild-${{ env.gvsbuildupdate }}-${{ env.gvsbuildref }}" >> $GITHUB_OUTPUT
          shell: bash
  build:
    name: Build on ${{ matrix.build }}
    needs: gvsbuild
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        build: [linux-amd64, windows-x86_64, macos-x86_64] #, linux-aarch64, macos-arm64]
        include:
          - build: linux-amd64
            os: ubuntu-latest
            rust: stable
            artifact_name: 'gerb-linux-amd64'
            target: x86_64-unknown-linux-gnu
          - build: windows-x86_64
            os: windows-2022
            rust: stable-msvc
            artifact_name: 'gerb-windows-x86_64'
            target: x86_64-pc-windows-msvc
          - build: macos-x86_64
            os: macos-latest
            rust: stable
            target: x86_64-apple-darwin
            artifact_name: 'gerb-darwin-amd64'
         #- build: linux-aarch64
         #  os: ubuntu-latest
         #  rust: stable
         #  target: aarch64-unknown-linux-gnu
         #  artifact_name: 'gerb-linux-aarch64'
         #- build: macos-arm64
         #  os: macos-latest
         #  rust: stable
         #  target: aarch64-apple-darwin
         #  artifact_name: 'gerb-darwin-arm64'
    steps:
      - uses: actions/checkout@v2
      - id: cache-rustup
        name: Cache Rust toolchain
        uses: actions/cache@v3
        with:
          path: ~/.rustup
          key: toolchain-${{ matrix.os }}-${{ matrix.rust }}
      - if: ${{ steps.cache-rustup.outputs.cache-hit != 'true' }}
        name: Install Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          override: true
      - name: Configure cargo data directory
        # After this point, all cargo registry and crate data is stored in
        # $GITHUB_WORKSPACE/.cargo_home. This allows us to cache only the files
        # that are needed during the build process. Additionally, this works
        # around a bug in the 'cache' action that causes directories outside of
        # the workspace dir to be saved/restored incorrectly.
        run: echo "CARGO_HOME=$(pwd)/.cargo_home" >> $GITHUB_ENV
      - id: cache-cargo
        name: Cache cargo configuration and installations
        uses: actions/cache@v3
        with:
          path: ${{ env.CARGO_HOME }}
          key: cargo-${{ matrix.os }}-${{ matrix.rust }}
      - if: ${{ steps.cache-cargo.outputs.cache-hit != 'true' }} && matrix.target
        name: Setup Rust target
        run: |
          mkdir -p "${{ env.CARGO_HOME }}"
          cat << EOF > "${{ env.CARGO_HOME }}"/config.toml
          [build]
          target = "${{ matrix.target }}"
          EOF
      - name: Install dependencies (macos x86_64)
        if: matrix.os == 'macos-latest' && matrix.target == 'x86_64-apple-darwin'
        run: |
          set -ex
          brew install librsvg gtk+3 gnome-icon-theme
      - name: Install dependencies (macos arm64)
        if: matrix.os == 'macos-latest' && matrix.target == 'aarch64-apple-darwin'
        run: |
          set -ex
          #arch -arm64e bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
          #arch -arm64e brew install librsvg gtk+3 gnome-icon-theme
          #brew fetch --force --deps --bottle-tag=arm64_big_sur librsvg gtk+3 gnome-icon-theme | tee brew.out
          #for t in `grep "Downloaded to" < brew.out | cut -f 3 -d ' '`; do
          #  brew install "$t"
          #done
      - name: Install dependencies (linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          set -ex
          sudo apt install libgtk-3-dev
          cargo install cargo-deb
      - name: Prepare install GTK (windows)
        if: matrix.os == 'windows-2022'
        run: mkdir C:\gtk-build\gtk\x64\release
      - name: Install GTK (windows)
        if: matrix.os == 'windows-2022'
        uses: actions/cache@v2
        id: cache-gtk
        with:
          path: C:\gtk-build\gtk\x64\release\**
          key: ${{needs.gvsbuild.outputs.cachekey}}
      - name: Prepare GTK-rs (windows)
        if: matrix.os == 'windows-2022'
        run: |
          echo "PKG_CONFIG=C:\gtk-build\gtk\x64\release\bin\pkgconf.exe" >> $GITHUB_ENV
          echo "C:\gtk-build\gtk\x64\release\bin" >> $GITHUB_PATH
      - name: Build binary
        run: |
          cargo build --release
          mv target/*/release/gerb target/gerb || true
          mv target/release/gerb target/gerb || true
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.artifact_name }}
          path: target/gerb
          if-no-files-found: error
          retention-days: 30
      - name: Build deb package
        if: matrix.os == 'ubuntu-latest' && matrix.target == 'x86_64-unknown-linux-gnu'
        run: |
          cargo deb --target=${{ matrix.target }}
      - name: Upload Artifacts
        if: matrix.os == 'ubuntu-latest' && matrix.target == 'x86_64-unknown-linux-gnu'
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.target }}-deb
          path: target/${{ matrix.target }}/debian/*.deb
          if-no-files-found: error
          retention-days: 30
